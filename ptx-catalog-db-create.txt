mysql -u root -p

CREATE DATABASE ptx_catalog;

USE ptx_catalog;


/* N.B. FOREIGN KEYS cannot be TEXT or BLOB */
/* Foreign keys cannot be stated for objects in tables which do not
yet exist;  build without the designation, then alter the tables
adding the foreign key information
*/


CREATE TABLE IF NOT EXISTS projects(

project_xml_id varchar(100) NOT NULL PRIMARY KEY,   /* beezer-FCLA */
project_title varchar(256) NOT NULL,
project_subtitle varchar(256),

project_license_code varchar(20) NOT NULL,       /* e.g. CC, GFDL, MIT, all-rights, public, undecided, request add'l */
project_license_variant varchar(20),             /* CC only   "BY-SA"??? */
project_license_version varchar(20),

project_publication_year YEAR,          /* Most recent publication year */
project_price_currency char(1),                  /* $ euros, pounds, etc */
project_price_amount decimal(5,2),               /* nnn.nn */

project_subject_id int NOT NULL,
project_target_level_id int NOT NULL,            /* UG lower division */
project_phase_id int NOT NULL,                   /* include inactive/abandoned etc */

project_landing_URL varchar(2048),
project_source_URL varchar(2048),
project_html_URL varchar(2048),
project_pdf_URL varchar(2048),
project_print_URL varchar(2048),
project_ancillary_ids varchar(20),               /* Multiple options workbook, instructor manual, EPUB, Runestone, Jupytper, braille  */

project_description_onesentence text,
project_descritpion_full text,                   /* Exposed by knowl */

project_features varchar(20),                    /* 1=gets a badge displayed */
project_recognition_code  varchar(20),                /* Presence on AIM Textbook initiative site */
project_award_id  varchar(20)
                                                 /* Citation text presence should be a binary indicator, so something */
                                                 /*   like a badge (trophy?) should indicate a knowl for this text. */


/*  Use alter tables later to add these constraints
/*
CONSTRAINT `fk_subject_id`
	   FOREIGN KEY (`project_subject_id`) REFERENCES subjects(`subject_id`),
CONSTRAINT `fk_phase_id`
	   FOREIGN KEY (`project_phase_id`) REFERENCES
	   phases(`phase_id`),
CONSTRAINT `fk_license_code`
	   FOREIGN KEY (`project_license_code`) REFERENCES licenses(`license_code`)
CONSTRAINT `fk_recognition_code`
	   FOREIGN KEY (`project_recognition_code`) REFERENCES recognition(`recognition_code`)


*/

)
engine innodb;
  

CREATE TABLE IF NOT EXISTS coauthors(
coauthors_id int PRIMARY KEY AUTO_INCREMENT NOT NULL,
coauthors_project_id varchar(100) NOT NULL,  /* coauthors_project_id keyed to project_xml_id */
coauthors_displayname VARCHAR(100) NOT NULL,
coauthors_url VARCHAR(100) NOT NULL,
coauthors_email VARCHAR(100) NOT NULL,
coauthors_affiliation TEXT NOT NULL,  /* Multiple entries allowed --- HTML?? */
coauthors_affiliation_2 TEXT

/* Add these constraints after table creations */
/* CONSTRAINT `fk_project_xml_id`
	   FOREIGN KEY (`coauthors_project_id`) REFERENCES projects(`project_xml_id`)*/

/* Capture when all authors have same affiliation. Sort by affiliation then name? */
)
engine=innodb;

	
CREATE TABLE IF NOT EXISTS subjects(
subject_id INT NOT NULL PRIMARY KEY,
subject_name varchar(100)
/* (math, cs, physics, engr, writing, music, doc, expository, misc )*/
);

CREATE TABLE IF NOT EXISTS levels(
level_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
level_name varchar(100)  /* e.g. ugld */
);

CREATE TABLE IF NOT EXISTS features(
feature_id INT NOT NULL PRIMARY KEY,   /* No auto-increment; we want to fix the order of the features */
feature_name varchar(100),
feature_URL varchar(200)
);

CREATE TABLE IF NOT EXISTS phases(
phase_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
phase_name varchar(100),
phase_description varchar(300)
);

CREATE TABLE IF NOT EXISTS recognition(
recognition_code varchar(20) NOT NULL PRIMARY KEY, 
recognition_name varchar(100),
recognition_URL varchar(200)
);

CREATE TABLE IF NOT EXISTS licenses(
license_code varchar(20) NOT NULL PRIMARY KEY,   
license_name varchar(100),
license_URL varchar(200)
);


CREATE TABLE IF NOT EXISTS ancillary (
ancillary_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
ancillary_name varchar(50) NOT NULL
 /* Multiple options workbook, instructor manual, EPUB, Runestone,
 Jupytper, braille  */
);

/* Now add back in the foreign keys from the child table to the parent */


alter table projects add CONSTRAINT `fk_subject_id`
	   FOREIGN KEY (`project_subject_id`) REFERENCES
	   subjects(`subject_id`);
	   
alter table projects add CONSTRAINT `fk_phase_id`
	   FOREIGN KEY (`project_phase_id`) REFERENCES phases(`phase_id`);

alter table coauthors add CONSTRAINT `fk_projects_xml_id`
      	   FOREIGN KEY (`coauthors_project_id`) REFERENCES
      	   projects(`project_xml_id`);

alter table projects add CONSTRAINT `fk_license_code`
	   FOREIGN KEY (`project_license_code`) REFERENCES
	   licenses(`license_code`);


alter table projects add CONSTRAINT `fk_recognition_code`
	   FOREIGN KEY (`project_recognition_code`) REFERENCES
	   recognition(`recognition_code`);


/* Not implemented  */
/*
CREATE TABLE IF NOT EXISTS authors(
author_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
author_displayname VARCHAR(100) NOT NULL,
author_url VARCHAR(100) NOT NULL,
author_email VARCHAR(100) NOT NULL,
author_affiliation_1 TEXT NOT NULL,
author_affiliation_2 TEXT,
author_affiliation_3 TEXT
);
*/


/* Description (Blurb) */

    /* N.B. Markup here (and elsewhere) is HTML, not PreTeXt!       */
    /* So use <i></i> for book titles and <a href=""></a> for       */
    /* hyperlinks.  (But note that the "sites" element is the       */
    /* best place to put links pointing to parts of  your project.  */

    /* onesentence (required) */
    /*   * Likely visible, so short and succinct                    */
    /*   * "description" (following) will amplify the "onesentence" */
    /*   * HTML respected (e.g. <i> for italics), do not use an     */
    /*     overall element (e.g. <p>) to surround entire sentence   */

    /* description (optional, but highly encouraged) */
    /*   * optional                                                 */
    /*   * a sequence of HTML "p" elements, lists should be OK      */
    /*   * can contain simple markup, additional URLs               */
    /*   * a narrative description of the project's aims            */
    /*   * include distinctive features not possible above/below    */
    /*   * knowled, so brevity not required                         */
    /*   * HTML respected, do use elements like <p>                 */



/* features
        hints="no"
1       answers="no"
        solutions="no"
        reading-questions="no"
        webwork="no"
        videos="no"
        worksheets="no"
        projects="no"
        accessible="no"
        self-study="no"
        instructor-solutions="no"
        instructor-guide="no"
        test-bank="no"
*/    

/*   @phase: develop, ready, mature, converting                 */
    /*     'develop'                                                */
    /*        in-progress, not ready for other instructors          */
    /*     'ready'                                                  */
    /*        could be used for a course, but more work planned     */
    /*     'mature'                                                 */
    /*        useful and pedagogically complete now, even if        */
    /*        more improvements are planned                         */
    /*     'converting'                                             */
    /*        ready/mature in another format, work in-progress      */
    /*        for PreTeXt versions                                  */

?8
<xsl:template match="license">
    <!-- TODO: Presumes just one now.  To expand, fence @code, -->
    <!-- and adjust tests to be "contains()" fenced versions   -->
    <!--  -->
    <xsl:if test="@code = 'CC'">
        <img class="badge license" title="Creative Commons License" src="https://pretextbook.org/badges/cc.png"/>
    </xsl:if>
    <!--  -->
    <xsl:if test="@code = 'GFDL'">
        <img class="badge license" title="GNU Free Documentation License" src="https://pretextbook.org/badges/gfdl.png"/>
    </xsl:if>
    <xsl:if test="@code = 'MIT'">
        <img class="badge license" title="MIT Open Source License" src="https://pretextbook.org/badges/MiT_opensource.png"/>
    </xsl:if>
    <!--  -->
    <!-- 'undecided displays as traditional copyright -->
    <xsl:if test="(@code = 'all-rights') or (@code = 'undecided')">
        <img class="badge license" title="All Rights Reserved" src="https://pretextbook.org/badges/copyright.jpg"/>
    </xsl:if>
    <!--  -->
    <xsl:if test="@code = 'public'">
        <img class="badge license" title="Public Domain" src="https://pretextbook.org/badges/public.png"/>
    </xsl:if>
    <!--  -->
    <!-- No specification is traditional copyright, source should be 'undecided' -->
    <xsl:if test="normalize-space(@code) = ''">
        <img class="badge license" title="All Rights Reserved" src="https://pretextbook.org/badges/copyright.jpg"/>
    </xsl:if>
    <!--  -->
</xsl:template>
*/

/*<xsl:template match="recognition">
    <xsl:if test="@aim = 'yes'">
        <img class="badge award" title="AIM Approved" src="https://pretextbook.org/badges/aim.png"/>
    </xsl:if>
</xsl:template>
*/
